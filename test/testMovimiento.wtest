import src.personaje.*
import src.posiciones.*
import src.objetos.*

describe "Mover hasta límites" {

    method initialize() {
        game.clear()
        game.width(3)
        game.height(3)
        personaje.position(game.at(1,1))
    }

    test "Mueve hasta el límite superior" {
        personaje.mover(arriba)
        assert.throwsException({personaje.mover(arriba)})
    }

    test "Mueve hasta el límite inferior" {
        personaje.mover(abajo)
        assert.throwsException({personaje.mover(abajo)})
    }

    test "Mueve hasta el límite derecho" {
        personaje.mover(derecha)
        assert.throwsException({personaje.mover(derecha)})
    }

    test "Mueve hasta el límite izquierdo" {
        personaje.mover(izquierda)
        assert.throwsException({personaje.mover(izquierda)})
    }
}

describe "Orientación personaje" {

    method initialize() {
        game.clear()
        game.width(3)
        game.height(3)
        game.addVisual(personaje)
    }

    test "Personaje mira hacia la dirección en que se mueve" {
        personaje.orientacion(arriba)
        personaje.position(game.at(1,1))
        personaje.mover(derecha)
        assert.equals(derecha, personaje.orientacion())
    }

    test "Aunque no pueda mover, cambia la orientación" {
        personaje.orientacion(arriba)
        personaje.position(game.at(2,0))
        assert.throwsException({personaje.mover(derecha)})
        assert.equals(derecha, personaje.orientacion())
        assert.throwsException({personaje.mover(abajo)})
        assert.equals(abajo, personaje.orientacion())
    }
}

describe "Personaje con caminosConDireccion" {
    test "Personaje puede atravesar un caminoConDireccion de == orientacion" {
        personaje.position(game.at(0,0))
        const caminoArriba = new CaminoConDireccion(position=game.at(0,1), orientacion = arriba)
        game.addVisual(caminoArriba)
        personaje.mover(arriba)
        assert.equals([personaje, caminoArriba], game.getObjectsIn(game.at(0,1)))
    }
    test "Personaje NO puede atravesar un caminoConDireccion de != orientacion" {
        personaje.position(game.at(0,0))
        const caminoDerecha = new CaminoConDireccion(position=game.at(0,1), orientacion = derecha)
        game.addVisual(caminoDerecha)
        assert.throwsException({personaje.mover(arriba)})
        assert.equals([caminoDerecha], game.getObjectsIn(game.at(0,1)))
    }
}